// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate gio_sys as gio;
extern crate gtk_sys as gtk;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

// Flags
bitflags! {
    #[repr(C)]
    pub struct AmtkFactoryFlags: c_uint {
        const FLAGS_NONE = 0;
        const IGNORE_GACTION = 1;
        const IGNORE_ICON = 2;
        const IGNORE_LABEL = 4;
        const IGNORE_TOOLTIP = 8;
        const IGNORE_ACCELS = 16;
        const IGNORE_ACCELS_FOR_DOC = 32;
        const IGNORE_ACCELS_FOR_APP = 64;
    }
}
pub const AMTK_FACTORY_FLAGS_NONE: AmtkFactoryFlags = AmtkFactoryFlags::FLAGS_NONE;
pub const AMTK_FACTORY_IGNORE_GACTION: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_GACTION;
pub const AMTK_FACTORY_IGNORE_ICON: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_ICON;
pub const AMTK_FACTORY_IGNORE_LABEL: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_LABEL;
pub const AMTK_FACTORY_IGNORE_TOOLTIP: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_TOOLTIP;
pub const AMTK_FACTORY_IGNORE_ACCELS: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_ACCELS;
pub const AMTK_FACTORY_IGNORE_ACCELS_FOR_DOC: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_ACCELS_FOR_DOC;
pub const AMTK_FACTORY_IGNORE_ACCELS_FOR_APP: AmtkFactoryFlags = AmtkFactoryFlags::IGNORE_ACCELS_FOR_APP;

// Records
#[repr(C)]
pub struct AmtkActionInfo(c_void);

impl ::std::fmt::Debug for AmtkActionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfo @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkActionInfoCentralStoreClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for AmtkActionInfoCentralStoreClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoCentralStoreClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct AmtkActionInfoCentralStorePrivate(c_void);

impl ::std::fmt::Debug for AmtkActionInfoCentralStorePrivate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoCentralStorePrivate @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkActionInfoEntry {
    pub action_name: *const c_char,
    pub icon_name: *const c_char,
    pub label: *const c_char,
    pub accel: *const c_char,
    pub tooltip: *const c_char,
    pub padding: [gpointer; 3],
}

impl ::std::fmt::Debug for AmtkActionInfoEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoEntry @ {:?}", self as *const _))
         .field("action_name", &self.action_name)
         .field("icon_name", &self.icon_name)
         .field("label", &self.label)
         .field("accel", &self.accel)
         .field("tooltip", &self.tooltip)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkActionInfoStoreClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for AmtkActionInfoStoreClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoStoreClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct AmtkActionInfoStorePrivate(c_void);

impl ::std::fmt::Debug for AmtkActionInfoStorePrivate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoStorePrivate @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkApplicationWindowClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for AmtkApplicationWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkApplicationWindowClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct AmtkApplicationWindowPrivate(c_void);

impl ::std::fmt::Debug for AmtkApplicationWindowPrivate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkApplicationWindowPrivate @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkFactoryClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for AmtkFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkFactoryClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct AmtkFactoryPrivate(c_void);

impl ::std::fmt::Debug for AmtkFactoryPrivate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkFactoryPrivate @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkMenuShellClass {
    pub parent_class: gobject::GObjectClass,
    pub menu_item_selected: Option<unsafe extern "C" fn(*mut AmtkMenuShell, *mut gtk::GtkMenuItem)>,
    pub menu_item_deselected: Option<unsafe extern "C" fn(*mut AmtkMenuShell, *mut gtk::GtkMenuItem)>,
    pub padding: [gpointer; 12],
}

impl ::std::fmt::Debug for AmtkMenuShellClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkMenuShellClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("menu_item_selected", &self.menu_item_selected)
         .field("menu_item_deselected", &self.menu_item_deselected)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct AmtkMenuShellPrivate(c_void);

impl ::std::fmt::Debug for AmtkMenuShellPrivate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkMenuShellPrivate @ {:?}", self as *const _))
         .finish()
    }
}

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkActionInfoCentralStore {
    pub parent: gobject::GObject,
    pub priv_: *mut AmtkActionInfoCentralStorePrivate,
}

impl ::std::fmt::Debug for AmtkActionInfoCentralStore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoCentralStore @ {:?}", self as *const _))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkActionInfoStore {
    pub parent: gobject::GObject,
    pub priv_: *mut AmtkActionInfoStorePrivate,
}

impl ::std::fmt::Debug for AmtkActionInfoStore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkActionInfoStore @ {:?}", self as *const _))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkApplicationWindow {
    pub parent: gobject::GObject,
    pub priv_: *mut AmtkApplicationWindowPrivate,
}

impl ::std::fmt::Debug for AmtkApplicationWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkApplicationWindow @ {:?}", self as *const _))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkFactory {
    pub parent: gobject::GObject,
    pub priv_: *mut AmtkFactoryPrivate,
}

impl ::std::fmt::Debug for AmtkFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkFactory @ {:?}", self as *const _))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AmtkMenuShell {
    pub parent: gobject::GObject,
    pub priv_: *mut AmtkMenuShellPrivate,
}

impl ::std::fmt::Debug for AmtkMenuShell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AmtkMenuShell @ {:?}", self as *const _))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AmtkFactoryFlags
    //=========================================================================
    pub fn amtk_factory_flags_get_type() -> GType;

    //=========================================================================
    // AmtkActionInfo
    //=========================================================================
    pub fn amtk_action_info_get_type() -> GType;
    pub fn amtk_action_info_new() -> *mut AmtkActionInfo;
    pub fn amtk_action_info_new_from_entry(info_entry: *const AmtkActionInfoEntry, translation_domain: *const c_char) -> *mut AmtkActionInfo;
    pub fn amtk_action_info_copy(info: *const AmtkActionInfo) -> *mut AmtkActionInfo;
    pub fn amtk_action_info_get_accels(info: *const AmtkActionInfo) -> *mut *mut c_char;
    pub fn amtk_action_info_get_action_name(info: *const AmtkActionInfo) -> *const c_char;
    pub fn amtk_action_info_get_icon_name(info: *const AmtkActionInfo) -> *const c_char;
    pub fn amtk_action_info_get_label(info: *const AmtkActionInfo) -> *const c_char;
    pub fn amtk_action_info_get_tooltip(info: *const AmtkActionInfo) -> *const c_char;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_action_info_has_been_used(info: *const AmtkActionInfo) -> gboolean;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_action_info_mark_as_used(info: *mut AmtkActionInfo);
    pub fn amtk_action_info_ref(info: *mut AmtkActionInfo) -> *mut AmtkActionInfo;
    pub fn amtk_action_info_set_accels(info: *mut AmtkActionInfo, accels: *mut *mut c_char);
    pub fn amtk_action_info_set_action_name(info: *mut AmtkActionInfo, action_name: *const c_char);
    pub fn amtk_action_info_set_icon_name(info: *mut AmtkActionInfo, icon_name: *const c_char);
    pub fn amtk_action_info_set_label(info: *mut AmtkActionInfo, label: *const c_char);
    pub fn amtk_action_info_set_tooltip(info: *mut AmtkActionInfo, tooltip: *const c_char);
    pub fn amtk_action_info_unref(info: *mut AmtkActionInfo);

    //=========================================================================
    // AmtkActionInfoCentralStore
    //=========================================================================
    pub fn amtk_action_info_central_store_get_type() -> GType;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_action_info_central_store_get_singleton() -> *mut AmtkActionInfoCentralStore;
    pub fn amtk_action_info_central_store_lookup(central_store: *mut AmtkActionInfoCentralStore, action_name: *const c_char) -> *mut AmtkActionInfo;

    //=========================================================================
    // AmtkActionInfoStore
    //=========================================================================
    pub fn amtk_action_info_store_get_type() -> GType;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_action_info_store_new() -> *mut AmtkActionInfoStore;
    pub fn amtk_action_info_store_add(store: *mut AmtkActionInfoStore, info: *mut AmtkActionInfo);
    pub fn amtk_action_info_store_add_entries(store: *mut AmtkActionInfoStore, entries: *mut AmtkActionInfoEntry, n_entries: c_int, translation_domain: *const c_char);
    pub fn amtk_action_info_store_check_all_used(store: *mut AmtkActionInfoStore);
    pub fn amtk_action_info_store_lookup(store: *mut AmtkActionInfoStore, action_name: *const c_char) -> *mut AmtkActionInfo;

    //=========================================================================
    // AmtkApplicationWindow
    //=========================================================================
    pub fn amtk_application_window_get_type() -> GType;
    pub fn amtk_application_window_get_from_gtk_application_window(gtk_window: *mut gtk::GtkApplicationWindow) -> *mut AmtkApplicationWindow;
    pub fn amtk_application_window_connect_menu_to_statusbar(amtk_window: *mut AmtkApplicationWindow, menu_shell: *mut gtk::GtkMenuShell);
    pub fn amtk_application_window_connect_recent_chooser_menu_to_statusbar(amtk_window: *mut AmtkApplicationWindow, menu: *mut gtk::GtkRecentChooserMenu);
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_application_window_create_open_recent_menu(amtk_window: *mut AmtkApplicationWindow) -> *mut gtk::GtkWidget;
    pub fn amtk_application_window_create_open_recent_menu_item(amtk_window: *mut AmtkApplicationWindow) -> *mut gtk::GtkWidget;
    pub fn amtk_application_window_get_application_window(amtk_window: *mut AmtkApplicationWindow) -> *mut gtk::GtkApplicationWindow;
    pub fn amtk_application_window_get_statusbar(amtk_window: *mut AmtkApplicationWindow) -> *mut gtk::GtkStatusbar;
    pub fn amtk_application_window_set_statusbar(amtk_window: *mut AmtkApplicationWindow, statusbar: *mut gtk::GtkStatusbar);

    //=========================================================================
    // AmtkFactory
    //=========================================================================
    pub fn amtk_factory_get_type() -> GType;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_new(application: *mut gtk::GtkApplication) -> *mut AmtkFactory;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_new_with_default_application() -> *mut AmtkFactory;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_check_menu_item(factory: *mut AmtkFactory, action_name: *const c_char) -> *mut gtk::GtkWidget;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_check_menu_item_full(factory: *mut AmtkFactory, action_name: *const c_char, flags: AmtkFactoryFlags) -> *mut gtk::GtkWidget;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_menu_item(factory: *mut AmtkFactory, action_name: *const c_char) -> *mut gtk::GtkWidget;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_menu_item_full(factory: *mut AmtkFactory, action_name: *const c_char, flags: AmtkFactoryFlags) -> *mut gtk::GtkWidget;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_menu_tool_button(factory: *mut AmtkFactory, action_name: *const c_char) -> *mut gtk::GtkMenuToolButton;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_menu_tool_button_full(factory: *mut AmtkFactory, action_name: *const c_char, flags: AmtkFactoryFlags) -> *mut gtk::GtkMenuToolButton;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_tool_button(factory: *mut AmtkFactory, action_name: *const c_char) -> *mut gtk::GtkToolItem;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_create_tool_button_full(factory: *mut AmtkFactory, action_name: *const c_char, flags: AmtkFactoryFlags) -> *mut gtk::GtkToolItem;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_get_application(factory: *mut AmtkFactory) -> *mut gtk::GtkApplication;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_get_default_flags(factory: *mut AmtkFactory) -> AmtkFactoryFlags;
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_factory_set_default_flags(factory: *mut AmtkFactory, default_flags: AmtkFactoryFlags);

    //=========================================================================
    // AmtkMenuShell
    //=========================================================================
    pub fn amtk_menu_shell_get_type() -> GType;
    pub fn amtk_menu_shell_get_from_gtk_menu_shell(gtk_menu_shell: *mut gtk::GtkMenuShell) -> *mut AmtkMenuShell;
    pub fn amtk_menu_shell_get_menu_shell(amtk_menu_shell: *mut AmtkMenuShell) -> *mut gtk::GtkMenuShell;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn amtk_action_map_add_action_entries_check_dups(action_map: *mut gio::GActionMap, entries: *mut gio::GActionEntry, n_entries: c_int, user_data: gpointer);
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_finalize();
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_init();
    pub fn amtk_menu_item_get_long_description(menu_item: *mut gtk::GtkMenuItem) -> *const c_char;
    pub fn amtk_menu_item_set_icon_name(item: *mut gtk::GtkMenuItem, icon_name: *const c_char);
    pub fn amtk_menu_item_set_long_description(menu_item: *mut gtk::GtkMenuItem, long_description: *const c_char);
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn amtk_utils_bind_g_action_to_gtk_action(g_action_map: *mut gio::GActionMap, g_action_name: *const c_char, gtk_action_group: *mut gtk::GtkActionGroup, gtk_action_name: *const c_char);
    pub fn amtk_utils_recent_chooser_menu_get_item_uri(menu: *mut gtk::GtkRecentChooserMenu, item: *mut gtk::GtkMenuItem) -> *mut c_char;

}
