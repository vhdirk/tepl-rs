// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

#[cfg(any(feature = "v3_0", feature = "dox"))]
use Buffer;
use TabGroup;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use View;
use ffi;
use glib;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Tab(Object<ffi::TeplTab, ffi::TeplTabClass>): TabGroup;

    match fn {
        get_type => || ffi::tepl_tab_get_type(),
    }
}

impl Tab {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn new() -> Tab {
        unsafe {
            from_glib_none(ffi::tepl_tab_new())
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn new_with_view(view: &View) -> Tab {
        unsafe {
            from_glib_none(ffi::tepl_tab_new_with_view(view.to_glib_none().0))
        }
    }
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
impl Default for Tab {
    fn default() -> Self {
        Self::new()
    }
}

pub trait TabExt {
    //fn add_info_bar<P: IsA</*Ignored*/gtk::InfoBar>>(&self, info_bar: &P);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_buffer(&self) -> Option<Buffer>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_view(&self) -> Option<View>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_close_request<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Tab> + IsA<glib::object::Object>> TabExt for O {
    //fn add_info_bar<P: IsA</*Ignored*/gtk::InfoBar>>(&self, info_bar: &P) {
    //    unsafe { TODO: call ffi::tepl_tab_add_info_bar() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(ffi::tepl_tab_get_buffer(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(ffi::tepl_tab_get_view(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_close_request<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "close-request",
                transmute(close_request_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::view",
                transmute(notify_view_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn close_request_trampoline<P>(this: *mut ffi::TeplTab, f: glib_ffi::gpointer)
where P: IsA<Tab> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tab::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_view_trampoline<P>(this: *mut ffi::TeplTab, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tab> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tab::from_glib_borrow(this).downcast_unchecked())
}
