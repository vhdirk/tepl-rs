// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use File;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct FileMetadata(Object<ffi::TeplFileMetadata, ffi::TeplFileMetadataClass>);

    match fn {
        get_type => || ffi::tepl_file_metadata_get_type(),
    }
}

impl FileMetadata {
    pub fn new(file: &File) -> FileMetadata {
        unsafe {
            from_glib_full(ffi::tepl_file_metadata_new(file.to_glib_none().0))
        }
    }
}

pub trait FileMetadataExt {
    fn get(&self, key: &str) -> Option<String>;

    fn get_file(&self) -> Option<File>;

    //fn load<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //fn load_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, io_priority: glib::Priority, cancellable: P, callback: Q);

    //fn save<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    //fn save_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, io_priority: glib::Priority, cancellable: P, callback: Q);

    fn set<'a, P: Into<Option<&'a str>>>(&self, key: &str, value: P);

    fn connect_property_file_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FileMetadata> + IsA<glib::object::Object>> FileMetadataExt for O {
    fn get(&self, key: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::tepl_file_metadata_get(self.to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn get_file(&self) -> Option<File> {
        unsafe {
            from_glib_none(ffi::tepl_file_metadata_get_file(self.to_glib_none().0))
        }
    }

    //fn load<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::tepl_file_metadata_load() }
    //}

    //fn load_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, io_priority: glib::Priority, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::tepl_file_metadata_load_async() }
    //}

    //fn save<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::tepl_file_metadata_save() }
    //}

    //fn save_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, io_priority: glib::Priority, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::tepl_file_metadata_save_async() }
    //}

    fn set<'a, P: Into<Option<&'a str>>>(&self, key: &str, value: P) {
        let value = value.into();
        let value = value.to_glib_none();
        unsafe {
            ffi::tepl_file_metadata_set(self.to_glib_none().0, key.to_glib_none().0, value.0);
        }
    }

    fn connect_property_file_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::file",
                transmute(notify_file_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_file_trampoline<P>(this: *mut ffi::TeplFileMetadata, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<FileMetadata> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&FileMetadata::from_glib_borrow(this).downcast_unchecked())
}
