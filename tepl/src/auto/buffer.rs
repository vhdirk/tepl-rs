// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use File;
use ffi;
use glib;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::StaticType;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Buffer(Object<ffi::TeplBuffer, ffi::TeplBufferClass>);

    match fn {
        get_type => || ffi::tepl_buffer_get_type(),
    }
}

impl Buffer {
    pub fn new() -> Buffer {
        unsafe {
            from_glib_full(ffi::tepl_buffer_new())
        }
    }
}

impl Default for Buffer {
    fn default() -> Self {
        Self::new()
    }
}

pub trait BufferExt {
    fn get_file(&self) -> Option<File>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_full_title(&self) -> Option<String>;

    //fn get_selection_type(&self) -> /*Ignored*/SelectionType;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_short_title(&self) -> Option<String>;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn get_style_scheme_id(&self) -> Option<String>;

    fn is_untouched(&self) -> bool;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn set_style_scheme_id(&self, style_scheme_id: &str);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_tepl_full_title(&self) -> Option<String>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_tepl_short_title(&self) -> Option<String>;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn get_property_tepl_style_scheme_id(&self) -> Option<String>;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn set_property_tepl_style_scheme_id(&self, tepl_style_scheme_id: Option<&str>);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_tepl_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_tepl_full_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_tepl_short_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_tepl_style_scheme_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Buffer> + IsA<glib::object::Object>> BufferExt for O {
    fn get_file(&self) -> Option<File> {
        unsafe {
            from_glib_none(ffi::tepl_buffer_get_file(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_full_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::tepl_buffer_get_full_title(self.to_glib_none().0))
        }
    }

    //fn get_selection_type(&self) -> /*Ignored*/SelectionType {
    //    unsafe { TODO: call ffi::tepl_buffer_get_selection_type() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_short_title(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::tepl_buffer_get_short_title(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn get_style_scheme_id(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::tepl_buffer_get_style_scheme_id(self.to_glib_none().0))
        }
    }

    fn is_untouched(&self) -> bool {
        unsafe {
            from_glib(ffi::tepl_buffer_is_untouched(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn set_style_scheme_id(&self, style_scheme_id: &str) {
        unsafe {
            ffi::tepl_buffer_set_style_scheme_id(self.to_glib_none().0, style_scheme_id.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_tepl_full_title(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "tepl-full-title".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_tepl_short_title(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "tepl-short-title".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn get_property_tepl_style_scheme_id(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "tepl-style-scheme-id".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn set_property_tepl_style_scheme_id(&self, tepl_style_scheme_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "tepl-style-scheme-id".to_glib_none().0, Value::from(tepl_style_scheme_id).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_tepl_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "tepl-cursor-moved",
                transmute(tepl_cursor_moved_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_tepl_full_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::tepl-full-title",
                transmute(notify_tepl_full_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_tepl_short_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::tepl-short-title",
                transmute(notify_tepl_short_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_tepl_style_scheme_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::tepl-style-scheme-id",
                transmute(notify_tepl_style_scheme_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_0", feature = "dox"))]
unsafe extern "C" fn tepl_cursor_moved_trampoline<P>(this: *mut ffi::TeplBuffer, f: glib_ffi::gpointer)
where P: IsA<Buffer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Buffer::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_tepl_full_title_trampoline<P>(this: *mut ffi::TeplBuffer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Buffer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Buffer::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_tepl_short_title_trampoline<P>(this: *mut ffi::TeplBuffer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Buffer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Buffer::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_0", feature = "dox"))]
unsafe extern "C" fn notify_tepl_style_scheme_id_trampoline<P>(this: *mut ffi::TeplBuffer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Buffer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Buffer::from_glib_borrow(this).downcast_unchecked())
}
