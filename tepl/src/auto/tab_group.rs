// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

#[cfg(any(feature = "v3_0", feature = "dox"))]
use Buffer;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use Tab;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use View;
use ffi;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct TabGroup(Object<ffi::TeplTabGroup, ffi::TeplTabGroupInterface>);

    match fn {
        get_type => || ffi::tepl_tab_group_get_type(),
    }
}

pub trait TabGroupExt {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn append_tab(&self, tab: &Tab, jump_to: bool);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_buffer(&self) -> Option<Buffer>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_tab(&self) -> Option<Tab>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_view(&self) -> Option<View>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_buffers(&self) -> Vec<Buffer>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_tabs(&self) -> Vec<Tab>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_views(&self) -> Vec<View>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_active_tab(&self, tab: &Tab);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_tab_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<TabGroup> + IsA<glib::object::Object>> TabGroupExt for O {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn append_tab(&self, tab: &Tab, jump_to: bool) {
        unsafe {
            ffi::tepl_tab_group_append_tab(self.to_glib_none().0, tab.to_glib_none().0, jump_to.to_glib());
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(ffi::tepl_tab_group_get_active_buffer(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_tab(&self) -> Option<Tab> {
        unsafe {
            from_glib_none(ffi::tepl_tab_group_get_active_tab(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_active_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(ffi::tepl_tab_group_get_active_view(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_buffers(&self) -> Vec<Buffer> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::tepl_tab_group_get_buffers(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_tabs(&self) -> Vec<Tab> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::tepl_tab_group_get_tabs(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_views(&self) -> Vec<View> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::tepl_tab_group_get_views(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_active_tab(&self, tab: &Tab) {
        unsafe {
            ffi::tepl_tab_group_set_active_tab(self.to_glib_none().0, tab.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active-buffer",
                transmute(notify_active_buffer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_tab_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active-tab",
                transmute(notify_active_tab_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_active_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active-view",
                transmute(notify_active_view_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_active_buffer_trampoline<P>(this: *mut ffi::TeplTabGroup, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<TabGroup> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&TabGroup::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_active_tab_trampoline<P>(this: *mut ffi::TeplTabGroup, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<TabGroup> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&TabGroup::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_active_view_trampoline<P>(this: *mut ffi::TeplTabGroup, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<TabGroup> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&TabGroup::from_glib_borrow(this).downcast_unchecked())
}
