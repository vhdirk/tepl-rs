// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

#[cfg(any(feature = "v3_0", feature = "dox"))]
use Tab;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct AbstractFactory(Object<ffi::TeplAbstractFactory, ffi::TeplAbstractFactoryClass>);

    match fn {
        get_type => || ffi::tepl_abstract_factory_get_type(),
    }
}

impl AbstractFactory {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn get_singleton() -> Option<AbstractFactory> {
        unsafe {
            from_glib_none(ffi::tepl_abstract_factory_get_singleton())
        }
    }
}

pub trait AbstractFactoryExt {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn create_tab(&self) -> Option<Tab>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tab_label(&self, tab: &Tab) -> /*Ignored*/Option<gtk::Widget>;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_singleton(&self);
}

impl<O: IsA<AbstractFactory>> AbstractFactoryExt for O {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn create_tab(&self) -> Option<Tab> {
        unsafe {
            from_glib_none(ffi::tepl_abstract_factory_create_tab(self.to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tab_label(&self, tab: &Tab) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call ffi::tepl_abstract_factory_create_tab_label() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_singleton(&self) {
        unsafe {
            ffi::tepl_abstract_factory_set_singleton(self.to_glib_full());
        }
    }
}
