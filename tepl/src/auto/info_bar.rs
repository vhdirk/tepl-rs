// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use gtk;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct InfoBar(Object<ffi::TeplInfoBar, ffi::TeplInfoBarClass>);

    match fn {
        get_type => || ffi::tepl_info_bar_get_type(),
    }
}

impl InfoBar {
    pub fn new() -> InfoBar {
        unsafe {
            from_glib_none(ffi::tepl_info_bar_new())
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn new_simple<'a, P: Into<Option<&'a str>>>(msg_type: gtk::MessageType, primary_msg: &str, secondary_msg: P) -> InfoBar {
        let secondary_msg = secondary_msg.into();
        let secondary_msg = secondary_msg.to_glib_none();
        unsafe {
            from_glib_none(ffi::tepl_info_bar_new_simple(msg_type.to_glib(), primary_msg.to_glib_none().0, secondary_msg.0))
        }
    }

    //pub fn create_label() -> /*Ignored*/Option<gtk::Label> {
    //    unsafe { TODO: call ffi::tepl_info_bar_create_label() }
    //}
}

impl Default for InfoBar {
    fn default() -> Self {
        Self::new()
    }
}

pub trait InfoBarExt {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_close_button(&self);

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn add_content_widget<P: IsA</*Ignored*/gtk::Widget>>(&self, content: &P);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_icon(&self);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_primary_message(&self, primary_msg: &str);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_secondary_message(&self, secondary_msg: &str);
}

impl<O: IsA<InfoBar>> InfoBarExt for O {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_close_button(&self) {
        unsafe {
            ffi::tepl_info_bar_add_close_button(self.to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn add_content_widget<P: IsA</*Ignored*/gtk::Widget>>(&self, content: &P) {
    //    unsafe { TODO: call ffi::tepl_info_bar_add_content_widget() }
    //}

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_icon(&self) {
        unsafe {
            ffi::tepl_info_bar_add_icon(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_primary_message(&self, primary_msg: &str) {
        unsafe {
            ffi::tepl_info_bar_add_primary_message(self.to_glib_none().0, primary_msg.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add_secondary_message(&self, secondary_msg: &str) {
        unsafe {
            ffi::tepl_info_bar_add_secondary_message(self.to_glib_none().0, secondary_msg.to_glib_none().0);
        }
    }
}
