// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::fmt;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Encoding(Boxed<ffi::TeplEncoding>);

    match fn {
        copy => |ptr| ffi::tepl_encoding_copy(mut_override(ptr)),
        free => |ptr| ffi::tepl_encoding_free(ptr),
        get_type => || ffi::tepl_encoding_get_type(),
    }
}

impl Encoding {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn new(charset: &str) -> Encoding {
        unsafe {
            from_glib_full(ffi::tepl_encoding_new(charset.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn new_from_locale() -> Encoding {
        unsafe {
            from_glib_full(ffi::tepl_encoding_new_from_locale())
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn new_utf8() -> Encoding {
        unsafe {
            from_glib_full(ffi::tepl_encoding_new_utf8())
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn equals<'a, P: Into<Option<&'a Encoding>>>(&self, enc2: P) -> bool {
        let enc2 = enc2.into();
        let enc2 = enc2.to_glib_none();
        unsafe {
            from_glib(ffi::tepl_encoding_equals(self.to_glib_none().0, enc2.0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::tepl_encoding_get_charset(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::tepl_encoding_get_name(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn is_utf8(&self) -> bool {
        unsafe {
            from_glib(ffi::tepl_encoding_is_utf8(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn to_string(&self) -> String {
        unsafe {
            from_glib_full(ffi::tepl_encoding_to_string(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_all() -> Vec<Encoding> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::tepl_encoding_get_all())
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_default_candidates() -> Vec<Encoding> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::tepl_encoding_get_default_candidates())
        }
    }
}

impl fmt::Display for Encoding {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.to_string())
    }
}
