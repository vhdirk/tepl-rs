// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use gio;
use glib;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Application(Object<ffi::TeplApplication, ffi::TeplApplicationClass>);

    match fn {
        get_type => || ffi::tepl_application_get_type(),
    }
}

impl Application {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_default() -> Option<Application> {
        unsafe {
            from_glib_none(ffi::tepl_application_get_default())
        }
    }

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //pub fn get_from_gtk_application(gtk_app: /*Ignored*/&gtk::Application) -> Option<Application> {
    //    unsafe { TODO: call ffi::tepl_application_get_from_gtk_application() }
    //}
}

pub trait ApplicationExt {
    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_app_action_info_store(&self) -> /*Ignored*/Option<amtk::ActionInfoStore>;

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_tepl_action_info_store(&self) -> /*Ignored*/Option<amtk::ActionInfoStore>;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn open_simple<P: IsA<gio::File>>(&self, file: &P);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Application> + IsA<glib::object::Object>> ApplicationExt for O {
    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_app_action_info_store(&self) -> /*Ignored*/Option<amtk::ActionInfoStore> {
    //    unsafe { TODO: call ffi::tepl_application_get_app_action_info_store() }
    //}

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application> {
    //    unsafe { TODO: call ffi::tepl_application_get_application() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_tepl_action_info_store(&self) -> /*Ignored*/Option<amtk::ActionInfoStore> {
    //    unsafe { TODO: call ffi::tepl_application_get_tepl_action_info_store() }
    //}

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn open_simple<P: IsA<gio::File>>(&self, file: &P) {
        unsafe {
            ffi::tepl_application_open_simple(self.to_glib_none().0, file.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::application",
                transmute(notify_application_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_0", feature = "dox"))]
unsafe extern "C" fn notify_application_trampoline<P>(this: *mut ffi::TeplApplication, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Application> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Application::from_glib_borrow(this).downcast_unchecked())
}
