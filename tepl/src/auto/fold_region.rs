// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct FoldRegion(Object<ffi::TeplFoldRegion, ffi::TeplFoldRegionClass>);

    match fn {
        get_type => || ffi::tepl_fold_region_get_type(),
    }
}

impl FoldRegion {
    //pub fn new<P: IsA</*Ignored*/gtk::TextBuffer>>(buffer: &P, start: /*Ignored*/&gtk::TextIter, end: /*Ignored*/&gtk::TextIter) -> FoldRegion {
    //    unsafe { TODO: call ffi::tepl_fold_region_new() }
    //}
}

pub trait FoldRegionExt {
    //fn get_bounds(&self, start: /*Ignored*/gtk::TextIter, end: /*Ignored*/gtk::TextIter) -> bool;

    //fn get_buffer(&self) -> /*Ignored*/Option<gtk::TextBuffer>;

    fn get_folded(&self) -> bool;

    //fn set_bounds(&self, start: /*Ignored*/&gtk::TextIter, end: /*Ignored*/&gtk::TextIter);

    fn set_folded(&self, folded: bool);

    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FoldRegion> + IsA<glib::object::Object>> FoldRegionExt for O {
    //fn get_bounds(&self, start: /*Ignored*/gtk::TextIter, end: /*Ignored*/gtk::TextIter) -> bool {
    //    unsafe { TODO: call ffi::tepl_fold_region_get_bounds() }
    //}

    //fn get_buffer(&self) -> /*Ignored*/Option<gtk::TextBuffer> {
    //    unsafe { TODO: call ffi::tepl_fold_region_get_buffer() }
    //}

    fn get_folded(&self) -> bool {
        unsafe {
            from_glib(ffi::tepl_fold_region_get_folded(self.to_glib_none().0))
        }
    }

    //fn set_bounds(&self, start: /*Ignored*/&gtk::TextIter, end: /*Ignored*/&gtk::TextIter) {
    //    unsafe { TODO: call ffi::tepl_fold_region_set_bounds() }
    //}

    fn set_folded(&self, folded: bool) {
        unsafe {
            ffi::tepl_fold_region_set_folded(self.to_glib_none().0, folded.to_glib());
        }
    }

    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::buffer",
                transmute(notify_buffer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::folded",
                transmute(notify_folded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_buffer_trampoline<P>(this: *mut ffi::TeplFoldRegion, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<FoldRegion> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&FoldRegion::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_folded_trampoline<P>(this: *mut ffi::TeplFoldRegion, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<FoldRegion> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&FoldRegion::from_glib_borrow(this).downcast_unchecked())
}
