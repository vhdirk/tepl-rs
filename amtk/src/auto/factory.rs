// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v3_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Factory(Object<ffi::AmtkFactory, ffi::AmtkFactoryClass>);

    match fn {
        get_type => || ffi::amtk_factory_get_type(),
    }
}

impl Factory {
    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //pub fn new<'a, P: Into<Option<&'a /*Ignored*/gtk::Application>>>(application: P) -> Factory {
    //    unsafe { TODO: call ffi::amtk_factory_new() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn new_with_default_application() -> Factory {
        unsafe {
            from_glib_full(ffi::amtk_factory_new_with_default_application())
        }
    }
}

pub trait FactoryExt {
    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_check_menu_item(&self, action_name: &str) -> /*Ignored*/Option<gtk::Widget>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_check_menu_item_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::Widget>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_item(&self, action_name: &str) -> /*Ignored*/Option<gtk::Widget>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_item_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::Widget>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_tool_button(&self, action_name: &str) -> /*Ignored*/Option<gtk::MenuToolButton>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_tool_button_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::MenuToolButton>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tool_button(&self, action_name: &str) -> /*Ignored*/Option<gtk::ToolItem>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tool_button_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::ToolItem>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application>;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_default_flags(&self) -> /*Ignored*/FactoryFlags;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn set_default_flags(&self, default_flags: /*Ignored*/FactoryFlags);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_default_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Factory> + IsA<glib::object::Object>> FactoryExt for O {
    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_check_menu_item(&self, action_name: &str) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call ffi::amtk_factory_create_check_menu_item() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_check_menu_item_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call ffi::amtk_factory_create_check_menu_item_full() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_item(&self, action_name: &str) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call ffi::amtk_factory_create_menu_item() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_item_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call ffi::amtk_factory_create_menu_item_full() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_tool_button(&self, action_name: &str) -> /*Ignored*/Option<gtk::MenuToolButton> {
    //    unsafe { TODO: call ffi::amtk_factory_create_menu_tool_button() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_menu_tool_button_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::MenuToolButton> {
    //    unsafe { TODO: call ffi::amtk_factory_create_menu_tool_button_full() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tool_button(&self, action_name: &str) -> /*Ignored*/Option<gtk::ToolItem> {
    //    unsafe { TODO: call ffi::amtk_factory_create_tool_button() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn create_tool_button_full(&self, action_name: &str, flags: /*Ignored*/FactoryFlags) -> /*Ignored*/Option<gtk::ToolItem> {
    //    unsafe { TODO: call ffi::amtk_factory_create_tool_button_full() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application> {
    //    unsafe { TODO: call ffi::amtk_factory_get_application() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_default_flags(&self) -> /*Ignored*/FactoryFlags {
    //    unsafe { TODO: call ffi::amtk_factory_get_default_flags() }
    //}

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn set_default_flags(&self, default_flags: /*Ignored*/FactoryFlags) {
    //    unsafe { TODO: call ffi::amtk_factory_set_default_flags() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::application",
                transmute(notify_application_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_default_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::default-flags",
                transmute(notify_default_flags_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_application_trampoline<P>(this: *mut ffi::AmtkFactory, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Factory> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Factory::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
unsafe extern "C" fn notify_default_flags_trampoline<P>(this: *mut ffi::AmtkFactory, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Factory> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Factory::from_glib_borrow(this).downcast_unchecked())
}
