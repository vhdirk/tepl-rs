// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

#[cfg(any(feature = "v2_0", feature = "dox"))]
use ActionInfo;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ActionInfoStore(Object<ffi::AmtkActionInfoStore, ffi::AmtkActionInfoStoreClass>);

    match fn {
        get_type => || ffi::amtk_action_info_store_get_type(),
    }
}

impl ActionInfoStore {
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn new() -> ActionInfoStore {
        unsafe {
            from_glib_full(ffi::amtk_action_info_store_new())
        }
    }
}

#[cfg(any(feature = "v3_0", feature = "dox"))]
impl Default for ActionInfoStore {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ActionInfoStoreExt {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add(&self, info: &ActionInfo);

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn add_entries<'a, P: Into<Option<&'a str>>>(&self, entries: /*Ignored*/&[&ActionInfoEntry], translation_domain: P);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn check_all_used(&self);

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn lookup(&self, action_name: &str) -> Option<ActionInfo>;
}

impl<O: IsA<ActionInfoStore>> ActionInfoStoreExt for O {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn add(&self, info: &ActionInfo) {
        unsafe {
            ffi::amtk_action_info_store_add(self.to_glib_none().0, info.to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn add_entries<'a, P: Into<Option<&'a str>>>(&self, entries: /*Ignored*/&[&ActionInfoEntry], translation_domain: P) {
    //    unsafe { TODO: call ffi::amtk_action_info_store_add_entries() }
    //}

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn check_all_used(&self) {
        unsafe {
            ffi::amtk_action_info_store_check_all_used(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn lookup(&self, action_name: &str) -> Option<ActionInfo> {
        unsafe {
            from_glib_none(ffi::amtk_action_info_store_lookup(self.to_glib_none().0, action_name.to_glib_none().0))
        }
    }
}
