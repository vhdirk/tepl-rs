// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v2_0", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct MenuShell(Object<ffi::AmtkMenuShell, ffi::AmtkMenuShellClass>);

    match fn {
        get_type => || ffi::amtk_menu_shell_get_type(),
    }
}

impl MenuShell {
    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //pub fn get_from_gtk_menu_shell<P: IsA</*Ignored*/gtk::MenuShell>>(gtk_menu_shell: &P) -> Option<MenuShell> {
    //    unsafe { TODO: call ffi::amtk_menu_shell_get_from_gtk_menu_shell() }
    //}
}

pub trait MenuShellExt {
    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_menu_shell(&self) -> /*Ignored*/Option<gtk::MenuShell>;

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn connect_menu_item_deselected<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn connect_menu_item_selected<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_menu_shell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MenuShell> + IsA<glib::object::Object>> MenuShellExt for O {
    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn get_menu_shell(&self) -> /*Ignored*/Option<gtk::MenuShell> {
    //    unsafe { TODO: call ffi::amtk_menu_shell_get_menu_shell() }
    //}

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn connect_menu_item_deselected<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored menu_item: Gtk.MenuItem
    //}

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //fn connect_menu_item_selected<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored menu_item: Gtk.MenuItem
    //}

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    fn connect_property_menu_shell_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::menu-shell",
                transmute(notify_menu_shell_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_0", feature = "dox"))]
unsafe extern "C" fn notify_menu_shell_trampoline<P>(this: *mut ffi::AmtkMenuShell, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MenuShell> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MenuShell::from_glib_borrow(this).downcast_unchecked())
}
