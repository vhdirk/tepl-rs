// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 2b56823)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ActionInfo(Shared<ffi::AmtkActionInfo>);

    match fn {
        ref => |ptr| ffi::amtk_action_info_ref(ptr),
        unref => |ptr| ffi::amtk_action_info_unref(ptr),
        get_type => || ffi::amtk_action_info_get_type(),
    }
}

impl ActionInfo {
    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn new() -> ActionInfo {
        unsafe {
            from_glib_full(ffi::amtk_action_info_new())
        }
    }

    //#[cfg(any(feature = "v2_0", feature = "dox"))]
    //pub fn new_from_entry<'a, P: Into<Option<&'a str>>>(info_entry: /*Ignored*/&ActionInfoEntry, translation_domain: P) -> ActionInfo {
    //    unsafe { TODO: call ffi::amtk_action_info_new_from_entry() }
    //}

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn copy(&self) -> Option<ActionInfo> {
        unsafe {
            from_glib_full(ffi::amtk_action_info_copy(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_accels(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::amtk_action_info_get_accels(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_action_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::amtk_action_info_get_action_name(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_icon_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::amtk_action_info_get_icon_name(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_label(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::amtk_action_info_get_label(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn get_tooltip(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::amtk_action_info_get_tooltip(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn has_been_used(&self) -> bool {
        unsafe {
            from_glib(ffi::amtk_action_info_has_been_used(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn mark_as_used(&self) {
        unsafe {
            ffi::amtk_action_info_mark_as_used(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn set_accels(&self, accels: &[&str]) {
        unsafe {
            ffi::amtk_action_info_set_accels(self.to_glib_none().0, accels.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn set_action_name(&self, action_name: &str) {
        unsafe {
            ffi::amtk_action_info_set_action_name(self.to_glib_none().0, action_name.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn set_icon_name<'a, P: Into<Option<&'a str>>>(&self, icon_name: P) {
        let icon_name = icon_name.into();
        let icon_name = icon_name.to_glib_none();
        unsafe {
            ffi::amtk_action_info_set_icon_name(self.to_glib_none().0, icon_name.0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn set_label<'a, P: Into<Option<&'a str>>>(&self, label: P) {
        let label = label.into();
        let label = label.to_glib_none();
        unsafe {
            ffi::amtk_action_info_set_label(self.to_glib_none().0, label.0);
        }
    }

    #[cfg(any(feature = "v2_0", feature = "dox"))]
    pub fn set_tooltip<'a, P: Into<Option<&'a str>>>(&self, tooltip: P) {
        let tooltip = tooltip.into();
        let tooltip = tooltip.to_glib_none();
        unsafe {
            ffi::amtk_action_info_set_tooltip(self.to_glib_none().0, tooltip.0);
        }
    }
}

#[cfg(any(feature = "v2_0", feature = "dox"))]
impl Default for ActionInfo {
    fn default() -> Self {
        Self::new()
    }
}
